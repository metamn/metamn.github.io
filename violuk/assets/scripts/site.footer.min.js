/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	// require here what goes into the footer
	__webpack_require__(1);


/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(2);
	__webpack_require__(8);


/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(3);


/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	var splitStringToChars = __webpack_require__(4);

	if (document.querySelector('.spacer')) {
	  splitStringToChars('.spacer__text', '.spacer__chars');
	}


/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

	var l = __webpack_require__(5);
	var select = __webpack_require__(6);
	var click = __webpack_require__(7);

	// Split string to chars
	//
	// $sourceID - the container for the text
	// $destinationID - the container where the characters will be inserted
	// $linkURL - the URL, if the text is a link
	// $linkTitle - the link title, if the text is a link
	var splitStringToChars = function(sourceID, destinationID, linkURL, linkTitle) {
	  linkURL = linkURL || '';
	  linkTitle = linkTitle || '';

	  var texts = select(sourceID);
	  var dest = select(destinationID);

	  texts.loop(function(text, index) {
	    var chars = text.innerHTML.split('');

	    var ret = '';
	    var link = '';

	    if (linkURL != '') {
	      var link = '<a href="' + linkURL + '" title="' + linkTitle + '">';
	    }

	    chars.loop(function(char, index) {
	      if (link != '') { ret += link; }
	      ret += '<span class="char char--' + index + '">' + char + '</span>';
	      if (link != '') { ret += '</a>' }
	    });


	    dest[index].innerHTML = ret;
	  });
	}

	module.exports = splitStringToChars;


/***/ },
/* 5 */
/***/ function(module, exports) {

	// Loop
	//
	// This is a replacement for the `for()` loop
	// - https://css-tricks.com/snippets/javascript/loop-queryselectorall-matches/
	//
	// It is important to avoid getting array elements by index, like `figures[i]`
	// - with `loop` if the `figures` are empty we won't get any error messages;
	// - with a `for` loop we will get an error and everything will halt
	//
	// Usage: `items.loop(item, index)`
	NodeList.prototype.loop = Array.prototype.forEach;
	Array.prototype.loop = Array.prototype.forEach;


	var loopDummy = function() {}
	module.exports = loopDummy;


/***/ },
/* 6 */
/***/ function(module, exports) {

	// Select
	//
	// A shorthand version for `document.querySelectorAll`
	// - this construct doesn't support a second argument specifying another container than `document`
	// - instead of `element.querySelectorAll('.id')` we should always use `document.querySelectorAll('.element .id')`
	//
	var select = function(IDs) {
	  return document.querySelectorAll(IDs);
	}


	module.exports = select;


/***/ },
/* 7 */
/***/ function(module, exports, __webpack_require__) {

	// Click
	//
	// Shorthand for `addEventListener("click")`
	//
	// - $items - a set of elements to apply click
	// - $cb - a callback function which returns the element clicked
	//
	// Usage:
	// click(items, function(item) { .... });
	//
	// Styleguide click


	var select = __webpack_require__(6);
	var l = __webpack_require__(5);


	var click = function(items, cb) {
	  items.loop(function(item) {
	    item.addEventListener("click", fn, false);
	  });

	  // The only way to return the HTMLElement clicked
	  // - all other constructs will return the mouse event instead
	  function fn() {
	    cb(this);
	  }
	}


	module.exports = click;


/***/ },
/* 8 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(9);


	var click = __webpack_require__(7);
	var select = __webpack_require__(6);
	var klass = __webpack_require__(10);


	var artwork = function() {
	  var trigger = select('.artwork');
	  var target = select('.about');

	  click(trigger, function() {
	    klass(target[0], 'about--active', 'toggle');
	  });
	}

	artwork();


/***/ },
/* 9 */
/***/ function(module, exports) {

	// - from https://codepen.io/MathiasPaumgarten/pen/CbEjG?page=5
	var canvas = document.getElementById('wave__canvas');
	var size = {
	    width: window.innerWidth,
	    height: window.innerHeight
	};

	/*
	 * CONFIG
	 */

	var options = {
	    color: "#000",
	    waveAmplitude: 40,
	    waveRadius: 200,
	    waveElasticity: 0.95,
	    waveStrength: 0.011,
	    waveMouse: 40,
	    waveMax: 200,
	    waveComeUp: function() {},
	    waveRiseSpeed: 15,
	    lineWidth: 2,
	    waveLength: 100,
	    distance: 20 // sets the number of waves
	};

	/*
	 * UTILITIES
	 */

	function times( amount, closure ) {
	    for ( var i = 0; i < amount; i++ ) {
	        closure( i );
	    }
	}

	function func( name ) {
	    return function( obj ) {
	        return obj[ name ]();
	    };
	}


	function rand( min, max ) {
	    return min + ( max - min ) * Math.random();
	}

	function bezier( points, context ) {

	    var a, b, x, y;

	    for ( var i = 1, length = points.length - 2; i < length; i++ ) {

	        a = points[ i ];
	        b = points[ i + 1 ];

	        x = ( a.x + b.x ) * 0.5;
	        y = ( a.y + b.y ) * 0.5;

	        context.quadraticCurveTo( a.x, a.y, x, y );
	    }

	    a = points[ i ];
	    b = points[ i + 1 ];

	    context.quadraticCurveTo( a.x, a.y, b.x, b.y );
	}

	function distance( a, b ) {
	    var x = b.x - a.x;
	    var y = b.y - a.y;

	    return Math.sqrt( x * x + y * y );
	}

	function clamp( val, min, max ) {
	    return val < min ? min : ( val > max ? max : val );
	}

	/*
	 * GLOBAL CLASSES
	 */

	var Mouse = ( function() {

	    var exports = {
	        x: 0,
	        y: 0,
	        bind: function( canvas ) {
	            canvas.addEventListener( "mousemove", onMouseMove );
	            canvas.addEventListener( "touchmove", onTouchMove );
	        },
	        unbind: function( canvas ) {
	            canvas.removeEventListener( "mousemove", onMouseMove );
	            canvas.removeEventListener( "touchmove", onTouchMove );
	        }
	    };

	    function onMouseMove( event ) {
	        exports.x = event.pageX;
	        exports.y = event.pageY;
	    }

	    function onTouchMove( event ) {
	        event.preventDefault();

	        exports.x = event.touches[ 0 ].pageX;
	        exports.y = event.touches[ 0 ].pageY;
	    }

	    return exports;

	} )();

	var Stage = {
	    width: 1,
	    height: 1,
	    set: function( values ) {
	        Stage.width = values.width;
	        Stage.height = values.height;
	    }
	};

	/*
	 * ARCHITECTURE CLASSES
	 */

	var Water = function( context ) {

	    var waves;

	    function init() {
	        options.waveComeUp = this.start.bind( this );
	    }

	    this.render = function() {
	        context.strokeStyle = options.color;
	        context.lineWidth = options.lineWidth;
	        context.lineCap = "round";
	        context.beginPath();

	        waves.forEach( func( "render" ) );

	        context.stroke();
	    };

	    this.setSize = function( width, height ) {

	        createWaves( height );

	        waves.forEach( function( wave ) {
	            wave.setSize( width, height );
	        } );

	    };

	    this.start = function() {
	        waves.forEach( func( "start" ) );
	    };

	    function createWaves( height ) {

	        waves = [];
	        var distance = options.distance;

	        times( height / distance, function( index ) {
	            waves.push( new Wave( 0, index * distance + 10, context, rand( 0.08, 0.12 ) * index ) );
	        } );

	    }

	    init.call( this );

	};

	var Wave = function( originalX, originalY, context, offset ) {

	    var anchors;
	    var width;
	    var height;
	    var mouseDirection;
	    var oldMouse;
	    var x;
	    var y;

	    function init() {
	        x = originalX;
	        y = originalY;

	        anchors = [];
	        mouseDirection = { x: 0, y: 0 };

	        var anchor;
	        var current = 0;
	        var start = - options.waveAmplitude;
	        var target = options.waveAmplitude;
	        var delta = offset;
	        var step = 0.4;

	        times( window.innerWidth / options.waveLength, function() {
	            anchor = new Anchor( current, 0, start, target, delta );
	            anchor.setOrigin( current + x, y );

	            anchors.push( anchor );

	            current += 90;
	            delta += step;

	            if ( delta > 1 ) {
	                times( Math.floor( delta ), function() {
	                    delta--;
	                    start *= -1;
	                    target *= -1;
	                } );
	            }

	        } );
	    }

	    this.render = function() {

	        update();

	        context.save();
	        context.translate( x, y );

	        context.moveTo( anchors[ 0 ].x, anchors[ 0 ].y );
	        bezier( anchors, context );

	        context.restore();
	    };

	    this.setSize = function( _width, _height ) {
	        width = _width;
	        height = _height;

	        var step = _width / ( anchors.length - 1 );

	        anchors.forEach( function( anchor, i ) {
	            anchor.x = step * i;
	            anchor.setOrigin( anchor.x, y );
	        } );
	    };

	    this.onAmpChange = function() {
	        anchors.forEach( func( "onAmpChange" ) );
	    };

	    this.start = function() {
	        y = height + 300 + originalY * 0.4;
	    };

	    function update() {
	        var targetY = Math.min( y, Mouse.y + originalY );
	        y += ( targetY - y ) / options.waveRiseSpeed;

	        updateMouse();

	        anchors.forEach( function( anchor ) {
	            anchor.update( mouseDirection, y );
	        } );
	    }

	    function updateMouse() {
	        if ( ! oldMouse ) {
	            oldMouse = { x: Mouse.x, y: Mouse.y };
	            return;
	        }

	        mouseDirection.x = Mouse.x - oldMouse.x;
	        mouseDirection.y = Mouse.y - oldMouse.y;

	        oldMouse = { x: Mouse.x, y: Mouse.y };
	    }

	    init.call( this );

	};

	var Anchor = function( x, y, start, target, delta ) {

	    var spring;
	    var motion;
	    var origin;

	    function init() {
	        spring = new Spring();
	        motion = new Motion( start, target, delta );
	        origin = {};
	        this.x = x;
	        this.y = y;
	    }

	    this.update = function( mouseDirection, currentY ) {
	        origin.y = currentY;

	        var factor = getMultiplier();
	        var vector = {
	            x: mouseDirection.x * factor * options.waveMouse,
	            y: mouseDirection.y * factor * options.waveMouse
	        };

	        if ( factor > 0 ) {
	            spring.shoot( vector );
	        }

	        spring.update();
	        motion.update();

	        this.y = motion.get() + spring.y;
	    };

	    this.onAmpChange = function() {
	        motion.onAmpChange();
	    };

	    this.setOrigin = function( x, y ) {
	        origin.x = x;
	        origin.y = y;
	    };


	    function getMultiplier() {
	        var lang = distance( Mouse, origin );
	        var radius = options.waveRadius;

	        return  lang < radius ? 1 - lang / radius : 0;
	    }

	    init.call( this );

	};

	var Motion = function( start, target, delta ) {

	    var SPEED = 0.02;
	    var half;
	    var upper;
	    var lower;
	    var min;
	    var max;

	    function init() {
	        this.onAmpChange();
	    }


	    this.setRange = function( a, b ) {
	        min = a;
	        max = b;
	    };

	    this.update = function() {
	        delta += SPEED;

	        if ( delta > 1 ) {
	            delta = 0;
	            start = target;
	            target = target < half ? rand( upper, max ) : rand( min, lower );
	        }
	    };

	    this.get = function() {
	        var factor = ( Math.cos( ( 1 + delta ) * Math.PI ) + 1 ) / 2;
	        return start + factor * ( target - start );
	    };

	    this.onAmpChange = function() {
	        min = - options.waveAmplitude;
	        max = options.waveAmplitude;
	        half = min + ( max - min ) / 2;
	        upper = min + ( max - min ) * 0.75;
	        lower = min + ( max - min ) * 0.25;
	    };


	    init.call( this );

	};

	var Spring = function() {

	    var px = 0;
	    var py = 0;
	    var vx = 0;
	    var vy = 0;
	    var targetX = 0;
	    var targetY = 0;
	    var timeout;

	    function init() {
	        this.x = 0;
	        this.y = 0;
	    }

	    this.update = function() {
	        vx = targetX - this.x;
	        vy = targetY - this.y;
	        px = px * options.waveElasticity + vx * options.waveStrength;
	        py = py * options.waveElasticity + vy * options.waveStrength;
	        this.x += px;
	        this.y += py;
	    };

	    this.shoot = function( vector ) {
	        targetX = clamp( vector.x, -options.waveMax, options.waveMax );
	        targetY = clamp( vector.y, -options.waveMax, options.waveMax );

	        clearTimeout( timeout );
	        timeout = setTimeout( cancelOffset, 100 );
	    };

	    function cancelOffset() {
	        targetX = 0;
	        targetY = 0;
	    }

	    init.call( this );
	};

	var Canvas = function( canvas, size ) {

	    var context;
	    var width, height;
	    var animation;

	    function init() {

	        context = canvas.getContext( "2d" );

	        setTimeout( function() {
	            Mouse.bind( canvas );
	        }, 1000 );

	        Stage.set( size );

	        animation = new Water( context );

	        this.setSize( size.width, size.height );

	        animation.start();

	        requestAnimationFrame( render );
	    }

	    function render() {
	        context.setTransform( 1, 0, 0, 1, 0, 0 );
	        context.clearRect( 0, 0, width, height );

	        context.save();
	        animation.render();
	        context.restore();

	        requestAnimationFrame( render );
	    }

	    this.setSize = function( _width, _height ) {

	        canvas.width = Stage.width = width = _width;
	        canvas.height = Stage.height = height = _height;

	        animation.setSize( _width, _height );
	    };

	    init.call( this );
	};

	/*
	 * START
	 */

	var app = new Canvas( canvas, size );

	window.addEventListener( "resize", function() {
	  app.setSize( window.innerWidth, window.innerHeight );
	}, false );


	var waveCanvas = function(ID) {
	  console.log('ID:' + ID);

	}

	module.exports = waveCanvas;


/***/ },
/* 10 */
/***/ function(module, exports, __webpack_require__) {

	var l = __webpack_require__(5);

	// The main Klass object
	//
	// $klass - one or more klasses like 'active' or 'active inactive'
	function Klass(klass) {
	  // converts multiple classes into an array
	  // - 'active inactive' => 'active', 'inactive'
	  this.klass = klass.split(' ');
	}

	Klass.prototype.removeAll = function(elements, klass, k) {
	  elements.loop(function(element) {
	    k.remove(element, klass);
	  });
	}

	Klass.prototype.addAll = function(elements, klass, k) {
	  elements.loop(function(element) {
	    k.add(element, klass);
	  });
	}

	Klass.prototype.remove = function(element, klass) {
	  element.classList.remove(klass);
	}

	Klass.prototype.add = function(element, klass) {
	  element.classList.add(klass);
	}

	Klass.prototype.has = function(element, klass) {
	  return element.classList.contains(klass);
	}

	//
	// $element - can be a single element or a collection of elements
	// $klass - can be a single klass or multiple klasses separated by space
	//
	var klass = function(element, klass, action) {
	  var k = new Klass(klass);

	  switch (action) {
	    case 'add':
	      k.klass.loop(function(klassname) {
	        k.add(element, klassname, k);
	      });
	      break;
	    case 'remove':
	      k.klass.loop(function(klassname) {
	        if (element.loop) {
	          element.loop(function(e) {
	            k.remove(e, klassname, k)
	          });
	        } else {
	          k.remove(element, klassname, k)
	        }
	      });
	      break;
	    case 'toggle':
	      k.klass.loop(function(klassname) {
	        k.has(element, klassname) ? k.remove(element, klassname, k) : k.add(element, klassname, k);
	      });
	      break;
	    case 'removeAll':
	      k.klass.loop(function(klassname) {
	        k.removeAll(element, klassname, k);
	      });
	      break;
	    case 'addAll':
	      k.klass.loop(function(klassname) {
	        k.addAll(element, klassname, k);
	      });
	      break;
	    case 'has':
	      return k.has(element, klass);
	      break;
	    default:
	  }
	}

	module.exports = klass;


/***/ }
/******/ ]);