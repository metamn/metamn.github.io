/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(1);


/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(2);


/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	var snap = __webpack_require__(3);
	var mstClick = __webpack_require__(4);


	// Document.ready ....
	window.onload = function() {
	  snap('.svg--landscape', 768, 1024);
	  snap('.svg--portrait', 768, 1024);
	  snap('.svg--mobile', 360, 640);

	  if (document.querySelector('.mst')) {
	    mstClick();
	  }
	};


/***/ },
/* 3 */
/***/ function(module, exports) {

	// Utils


	// Convert Title to Class
	// - What's Next -> 'whats-next'
	var convertToClassName = function(s) {
	  return s.replace(/\s+/g, '-').toLowerCase();
	}



	// Draw the SVG
	var snap = function(id, width, height) {

	  // Init Snap
	  var paper = Snap(id).attr({
	    viewBox: "0 0 " + width + " " + height
	  });



	  // Settings
	  // - the number of vertical points (senses)
	  var points = 8;

	  // - the names of senses
	  var senses = [
	    'Position',
	    'Motion',
	    'Irritability',
	    'Reflex',
	    'Association',
	    'Thought',
	    'Culture',
	    '???'
	  ];

	  // - the transitions
	  var transitions = [
	    'Control of Position = Motion',
	    'Control of Motion = Irritability',
	    'Control of Irritability = Reflex',
	    'Control of Reflex = Association',
	    'Control of Association = Thinking',
	    'Control of Thinking = Culture',
	    'Control of Culture = The next transition',
	    'Nobody knows what will happen there'
	    ];

	  // - the radius of the sense point
	  var radiusSensePoint = 20;

	  // - axis arrow size
	  var arrowSize = 20;

	  // - axis legend
	  var axisLegend = [
	    'Control',
	    'Senses'
	  ]


	  // Draw the axes

	  // - the arrow marker
	  var arrow = paper.path("M0,0 L0,6 L9,3 z").attr({fill: '#000'});
	  var marker = arrow.marker(0, 0, arrowSize, arrowSize, 0, 3);

	  var axisX = paper.path("M" + (arrowSize / 2) + "," + (height - arrowSize / 2) + "H" + (width - arrowSize)).attr({
	    class: "axis axis--x",
	    markerEnd: marker
	  });

	  var axisY = paper.path("M" + (arrowSize / 2) + "," + (height - arrowSize / 2) + "V" + arrowSize).attr({
	    class: "axis axis--y",
	    markerEnd: marker
	  });

	  // - the legend
	  // Add text to sense points
	  axisLegendX = paper.text(width - 130, height - arrowSize - 10, axisLegend[1]).attr({
	    class: 'axis__legend axis__legend--x'
	  });

	  axisLegendY = paper.text(arrowSize + 10, arrowSize + 10, axisLegend[0]).attr({
	    class: 'axis__legend axis__legend--y'
	  });


	  // Draw the vertical rulers
	  var rulers = [];

	  for (var i = 1; i <= points; i++ ) {
	    var y = (height / points) * i;
	    rulers[i-1] = paper.path("M0," + y + "H" + width).attr({
	      class: "ruler ruler-" + i
	    });
	  }


	  // Draw the diagonal
	  var diagonal = paper.path("M0," + height + "L" + width + ",0").attr({
	    class: 'diagonal'
	  });


	  // Draw sense points and circles at the intersection of rulers with diagonal
	  var sensePoints = [];
	  var senseCircles = [];
	  var senseTitles = [];
	  var senseDescriptions = [];

	  // Black background
	  // - http://stackoverflow.com/questions/31010029/svg-draw-text-with-solid-background-color
	  var bbf = '<filter x="0" y="0" width="1" height="1" id="bbf"><feFlood flood-color="black"/><feComposite in="SourceGraphic"/></filter>';
	  paper.append(Snap.parse(bbf));
	  var blackBackgroundFiler = Snap('#bbf');

	  // Glow a sense point
	  function glow(point) {
	    point.animate(
	      {
	        r: 1
	      },
	      220,
	      function() {
	        point.animate(
	          {
	            r: radiusSensePoint
	          },
	          300
	        );
	      }
	    );
	  }

	  // Loop and draw
	  for (var i = 0; i < points; i++ ) {
	    var intersection = Snap.path.intersection(diagonal, rulers[i]);
	    var x = intersection[0].x;
	    var y = intersection[0].y

	    // Move up the first circle
	    if (i == points - 1) {
	      x += radiusSensePoint / 2;
	      y -= radiusSensePoint / 2;
	    }

	    // Class names
	    var titleConverted = convertToClassName(senses[points - i - 1]);
	    var classPoint = "sense__point sense__point--" + titleConverted;
	    var classCircle = "sense__circle sense__circle--" + titleConverted;
	    var classTitle = "sense__title sense__title--" + titleConverted;
	    var descriptionTitle = "sense__description";

	    // Draw sense circles
	    // - radius is calculated with the Pitagoras theorem
	    var radiusCircle = Math.sqrt(Math.pow(x, 2) + Math.pow((height-y), 2));
	    senseCircles[i] = paper.circle(0, height, radiusCircle).attr({
	      class: classCircle
	    });

	    // Draw sense points
	    sensePoints[i] = paper.circle(x, y, radiusSensePoint).attr({
	      class: classPoint
	    });

	    // Add hover to sense points
	    senseDescriptions[i] = paper.text(arrowSize, y - (radiusSensePoint * 2.5), transitions[points - i - 1]).attr({
	      class: descriptionTitle,
	      filter: blackBackgroundFiler
	    });

	    // Add text to sense points
	    senseTitles[i] = paper.text(x + (radiusSensePoint * 2), y, senses[points - i - 1]).attr({
	      class: classTitle
	    });

	    // Animate sense points
	    setInterval(glow(sensePoints[i]), 1000);
	  }
	}

	module.exports = snap;


/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

	var l = __webpack_require__(5);
	var select = __webpack_require__(6);
	var click = __webpack_require__(7);
	var klass = __webpack_require__(8);


	var mstClick = function() {
	  var mst = select('.mst');

	  click(mst, clickMst);

	  function clickMst(item) {
	    klass(item, 'mst--inactive', 'remove');
	    klass(item, 'mst--active', 'add');
	  }
	}

	module.exports = mstClick;


/***/ },
/* 5 */
/***/ function(module, exports) {

	// Loop
	//
	// This is a replacement for the `for()` loop
	// - https://css-tricks.com/snippets/javascript/loop-queryselectorall-matches/
	//
	// It is important to avoid getting array elements by index, like `figures[i]`
	// - with `loop` if the `figures` are empty we won't get any error messages;
	// - with a `for` loop we will get an error and everything will halt
	//
	// Usage: `items.loop(item, index)`
	NodeList.prototype.loop = Array.prototype.forEach;
	Array.prototype.loop = Array.prototype.forEach;


	var loopDummy = function() {}
	module.exports = loopDummy;


/***/ },
/* 6 */
/***/ function(module, exports) {

	// Select
	//
	// A shorthand version for `document.querySelectorAll`
	// - this construct doesn't support a second argument specifying another container than `document`
	// - instead of `element.querySelectorAll('.id')` we should always use `document.querySelectorAll('.element .id')`
	//
	var select = function(IDs) {
	  return document.querySelectorAll(IDs);
	}


	module.exports = select;


/***/ },
/* 7 */
/***/ function(module, exports, __webpack_require__) {

	// Click
	//
	// Shorthand for `addEventListener("click")`
	//
	// - $items - a set of elements to apply click
	// - $cb - a callback function which returns the element clicked
	//
	// Usage:
	// click(items, function(item) { .... });
	//
	// Styleguide click


	var select = __webpack_require__(6);
	var l = __webpack_require__(5);


	var click = function(items, cb) {
	  items.loop(function(item) {
	    item.addEventListener("click", fn, false);
	  });

	  // The only way to return the HTMLElement clicked
	  // - all other constructs will return the mouse event instead
	  function fn() {
	    cb(this);
	  }
	}


	module.exports = click;


/***/ },
/* 8 */
/***/ function(module, exports, __webpack_require__) {

	var l = __webpack_require__(5);

	// The main Klass object
	//
	// $klass - one or more klasses like 'active' or 'active inactive'
	function Klass(klass) {
	  // converts multiple classes into an array
	  // - 'active inactive' => 'active', 'inactive'
	  this.klass = klass.split(' ');
	}

	Klass.prototype.removeAll = function(elements, klass, k) {
	  elements.loop(function(element) {
	    k.remove(element, klass);
	  });
	}

	Klass.prototype.addAll = function(elements, klass, k) {
	  elements.loop(function(element) {
	    k.add(element, klass);
	  });
	}

	Klass.prototype.remove = function(element, klass) {
	  element.classList.remove(klass);
	}

	Klass.prototype.add = function(element, klass) {
	  element.classList.add(klass);
	}

	Klass.prototype.has = function(element, klass) {
	  return element.classList.contains(klass);
	}

	//
	// $element - can be a single element or a collection of elements
	// $klass - can be a single klass or multiple klasses separated by space
	//
	var klass = function(element, klass, action) {
	  var k = new Klass(klass);

	  switch (action) {
	    case 'add':
	      k.klass.loop(function(klassname) {
	        k.add(element, klassname, k);
	      });
	      break;
	    case 'remove':
	      k.klass.loop(function(klassname) {
	        k.remove(element, klassname, k);
	      });
	      break;
	    case 'toggle':
	      k.klass.loop(function(klassname) {
	        k.has(element, klassname) ? k.remove(element, klassname, k) : k.add(element, klassname, k);
	      });
	      break;
	    case 'removeAll':
	      k.klass.loop(function(klassname) {
	        k.removeAll(element, klassname, k);
	      });
	      break;
	    case 'addAll':
	      k.klass.loop(function(klassname) {
	        k.addAll(element, klassname, k);
	      });
	      break;
	    case 'has':
	      return k.has(element, klass);
	      break;
	    default:
	  }
	}

	module.exports = klass;


/***/ }
/******/ ]);