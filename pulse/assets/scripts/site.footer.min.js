/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(1);


/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(2);


/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

	var splitStringToChars = __webpack_require__(3);

	if (document.querySelector('.spacer')) {
	  splitStringToChars('.spacer__text', '.spacer__chars');
	}


/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

	var l = __webpack_require__(4);
	var select = __webpack_require__(5);
	var click = __webpack_require__(6);

	// Split string to chars
	//
	// $sourceID - the container for the text
	// $destinationID - the container where the characters will be inserted
	// $linkURL - the URL, if the text is a link
	// $linkTitle - the link title, if the text is a link
	var splitStringToChars = function(sourceID, destinationID, linkURL, linkTitle) {
	  linkURL = linkURL || '';
	  linkTitle = linkTitle || '';

	  var text = select(sourceID);
	  var chars = text[0].innerHTML.split('');

	  var ret = '';
	  var link = '';

	  if (linkURL != '') {
	    var link = '<a href="' + linkURL + '" title="' + linkTitle + '">';
	  }

	  chars.loop(function(char, index) {
	    if (link != '') { ret += link; }
	    ret += '<span class="char char--' + index + '">' + char + '</span>';
	    if (link != '') { ret += '</a>' }
	  });

	  var dest = select(destinationID);
	  dest[0].innerHTML = ret;
	}

	module.exports = splitStringToChars;


/***/ }),
/* 4 */
/***/ (function(module, exports) {

	// Loop
	//
	// This is a replacement for the `for()` loop
	// - https://css-tricks.com/snippets/javascript/loop-queryselectorall-matches/
	//
	// It is important to avoid getting array elements by index, like `figures[i]`
	// - with `loop` if the `figures` are empty we won't get any error messages;
	// - with a `for` loop we will get an error and everything will halt
	//
	// Usage: `items.loop(item, index)`
	NodeList.prototype.loop = Array.prototype.forEach;
	Array.prototype.loop = Array.prototype.forEach;


	var loopDummy = function() {}
	module.exports = loopDummy;


/***/ }),
/* 5 */
/***/ (function(module, exports) {

	// Select
	//
	// A shorthand version for `document.querySelectorAll`
	// - this construct doesn't support a second argument specifying another container than `document`
	// - instead of `element.querySelectorAll('.id')` we should always use `document.querySelectorAll('.element .id')`
	//
	var select = function(IDs) {
	  return document.querySelectorAll(IDs);
	}


	module.exports = select;


/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

	// Click
	//
	// Shorthand for `addEventListener("click")`
	//
	// - $items - a set of elements to apply click
	// - $cb - a callback function which returns the element clicked
	//
	// Usage:
	// click(items, function(item) { .... });
	//
	// Styleguide click


	var select = __webpack_require__(5);
	var l = __webpack_require__(4);


	var click = function(items, cb) {
	  items.loop(function(item) {
	    item.addEventListener("click", fn, false);
	  });

	  // The only way to return the HTMLElement clicked
	  // - all other constructs will return the mouse event instead
	  function fn() {
	    cb(this);
	  }
	}


	module.exports = click;


/***/ })
/******/ ]);